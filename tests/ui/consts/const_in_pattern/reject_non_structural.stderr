error: constant of non-structural type `NoDerive` in a pattern
  --> $DIR/reject_non_structural.rs:56:36
   |
LL | struct NoDerive;
   | --------------- `NoDerive` must be annotated with `#[derive(PartialEq)]` to be usable in patterns
...
LL |     const ENUM: Derive<NoDerive> = Derive::Some(NoDerive);
   |     ---------------------------- constant defined here
LL |     match Derive::Some(NoDerive) { ENUM => dbg!(ENUM), _ => panic!("whoops"), };
   |                                    ^^^^ constant of non-structural type
   |
note: the `PartialEq` trait must be derived, manual `impl`s are not sufficient; see https://doc.rust-lang.org/stable/std/marker/trait.StructuralPartialEq.html for details
  --> $DIR/reject_non_structural.rs:29:1
   |
LL | impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: constant of non-structural type `NoDerive` in a pattern
  --> $DIR/reject_non_structural.rs:61:28
   |
LL | struct NoDerive;
   | --------------- `NoDerive` must be annotated with `#[derive(PartialEq)]` to be usable in patterns
...
LL |     const FIELD: OND = TrivialEq(Some(NoDerive)).0;
   |     ---------------- constant defined here
LL |     match Some(NoDerive) { FIELD => dbg!(FIELD), _ => panic!("whoops"), };
   |                            ^^^^^ constant of non-structural type
   |
note: the `PartialEq` trait must be derived, manual `impl`s are not sufficient; see https://doc.rust-lang.org/stable/std/marker/trait.StructuralPartialEq.html for details
  --> $DIR/reject_non_structural.rs:29:1
   |
LL | impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: constant of non-structural type `NoDerive` in a pattern
  --> $DIR/reject_non_structural.rs:67:27
   |
LL | struct NoDerive;
   | --------------- `NoDerive` must be annotated with `#[derive(PartialEq)]` to be usable in patterns
...
LL |     const INDIRECT: OND = NO_DERIVE_SOME;
   |     ------------------- constant defined here
LL |     match Some(NoDerive) {INDIRECT => dbg!(INDIRECT), _ => panic!("whoops"), };
   |                           ^^^^^^^^ constant of non-structural type
   |
note: the `PartialEq` trait must be derived, manual `impl`s are not sufficient; see https://doc.rust-lang.org/stable/std/marker/trait.StructuralPartialEq.html for details
  --> $DIR/reject_non_structural.rs:29:1
   |
LL | impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: constant of non-structural type `NoDerive` in a pattern
  --> $DIR/reject_non_structural.rs:72:36
   |
LL | struct NoDerive;
   | --------------- `NoDerive` must be annotated with `#[derive(PartialEq)]` to be usable in patterns
...
LL |     const TUPLE: (OND, OND) = (None, Some(NoDerive));
   |     ----------------------- constant defined here
LL |     match (None, Some(NoDerive)) { TUPLE => dbg!(TUPLE), _ => panic!("whoops"), };
   |                                    ^^^^^ constant of non-structural type
   |
note: the `PartialEq` trait must be derived, manual `impl`s are not sufficient; see https://doc.rust-lang.org/stable/std/marker/trait.StructuralPartialEq.html for details
  --> $DIR/reject_non_structural.rs:29:1
   |
LL | impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: constant of non-structural type `NoDerive` in a pattern
  --> $DIR/reject_non_structural.rs:77:36
   |
LL | struct NoDerive;
   | --------------- `NoDerive` must be annotated with `#[derive(PartialEq)]` to be usable in patterns
...
LL |     const ARRAY: [OND; 2] = [None, Some(NoDerive)];
   |     --------------------- constant defined here
LL |     match [None, Some(NoDerive)] { ARRAY => dbg!(ARRAY), _ => panic!("whoops"), };
   |                                    ^^^^^ constant of non-structural type
   |
note: the `PartialEq` trait must be derived, manual `impl`s are not sufficient; see https://doc.rust-lang.org/stable/std/marker/trait.StructuralPartialEq.html for details
  --> $DIR/reject_non_structural.rs:29:1
   |
LL | impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: constant of non-structural type `NoDerive` in a pattern
  --> $DIR/reject_non_structural.rs:82:33
   |
LL | struct NoDerive;
   | --------------- `NoDerive` must be annotated with `#[derive(PartialEq)]` to be usable in patterns
...
LL |     const REPEAT: [OND; 2] = [Some(NoDerive); 2];
   |     ---------------------- constant defined here
LL |     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!("whoops"), };
   |                                 ^^^^^^ constant of non-structural type
   |
note: the `PartialEq` trait must be derived, manual `impl`s are not sufficient; see https://doc.rust-lang.org/stable/std/marker/trait.StructuralPartialEq.html for details
  --> $DIR/reject_non_structural.rs:29:1
   |
LL | impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: constant of non-structural type `NoDerive` in a pattern
  --> $DIR/reject_non_structural.rs:88:28
   |
LL | struct NoDerive;
   | --------------- `NoDerive` must be annotated with `#[derive(PartialEq)]` to be usable in patterns
...
LL |     trait Trait: Sized { const ASSOC: Option<Self>; }
   |     ------------------   ------------------------- constant defined here
LL |     impl Trait for NoDerive { const ASSOC: Option<NoDerive> = Some(NoDerive); }
LL |     match Some(NoDerive) { NoDerive::ASSOC => dbg!(NoDerive::ASSOC), _ => panic!("whoops"), };
   |                            ^^^^^^^^^^^^^^^ constant of non-structural type
   |
note: the `PartialEq` trait must be derived, manual `impl`s are not sufficient; see https://doc.rust-lang.org/stable/std/marker/trait.StructuralPartialEq.html for details
  --> $DIR/reject_non_structural.rs:29:1
   |
LL | impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: constant of non-structural type `NoDerive` in a pattern
  --> $DIR/reject_non_structural.rs:93:28
   |
LL | struct NoDerive;
   | --------------- `NoDerive` must be annotated with `#[derive(PartialEq)]` to be usable in patterns
...
LL |     const BLOCK: OND = { NoDerive; Some(NoDerive) };
   |     ---------------- constant defined here
LL |     match Some(NoDerive) { BLOCK => dbg!(BLOCK), _ => panic!("whoops"), };
   |                            ^^^^^ constant of non-structural type
   |
note: the `PartialEq` trait must be derived, manual `impl`s are not sufficient; see https://doc.rust-lang.org/stable/std/marker/trait.StructuralPartialEq.html for details
  --> $DIR/reject_non_structural.rs:29:1
   |
LL | impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: constant of non-structural type `NoDerive` in a pattern
  --> $DIR/reject_non_structural.rs:98:29
   |
LL | struct NoDerive;
   | --------------- `NoDerive` must be annotated with `#[derive(PartialEq)]` to be usable in patterns
...
LL |     const ADDR_OF: &OND = &Some(NoDerive);
   |     ------------------- constant defined here
LL |     match &Some(NoDerive) { ADDR_OF => dbg!(ADDR_OF), _ => panic!("whoops"), };
   |                             ^^^^^^^ constant of non-structural type
   |
note: the `PartialEq` trait must be derived, manual `impl`s are not sufficient; see https://doc.rust-lang.org/stable/std/marker/trait.StructuralPartialEq.html for details
  --> $DIR/reject_non_structural.rs:29:1
   |
LL | impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 9 previous errors

